#!/usr/bin/env python
from __future__ import annotations

import argparse
import json
import os
import string
from pathlib import Path

repo_simflow = ("git@github.com:legend-exp/legend-simflow.git", "main")
repo_metadata = ("https://github.com/legend-exp/legend-metadata.git", "main")


def main():
    # check existence of env vars
    if not os.getenv("PRODENV"):
        RuntimeError("source setup.sh before continuing")

    parser = argparse.ArgumentParser(description="Initialize a new production cycle")
    parser.add_argument(
        "rpath",
        help="relative path of directory in which the production cycle will be created",
        default="",
    )
    args = parser.parse_args()

    path_cycle = Path(os.getenv("PRODENV")) / args.rpath
    path_cycle.mkdir(parents=True)

    # Create json config file
    config_file = {
        "setups": {
            "l200": {
                "paths": {
                    "tier_daq": "",
                    "simflow": "$_/simflow",
                    "metadata": "$_/inputs",
                    "config": "$_/inputs/simprod/config",
                    "chan_map": "$_/inputs/hardware/configuration",
                    "detector_db": "$_/inputs/hardware/detectors",
                    "tier": "$_/generated/tier",
                    "tier_mac": "$_/generated/tier/mac",
                    "tier_raw": "$_/generated/tier/raw",
                    "tier_evt": "$_/generated/tier/evt",
                    "tier_pdf": "$_/generated/tier/pdf",
                    "plt": "$_/generated/plt",
                    "log": "$_/generated/log",
                    "src": "$_/software/python/src",
                    "install": "$_/software/python/install",
                    "cache": "$_/software/python/cache",
                },
                "execenv": {
                    "cmd": "apptainer run",
                    "arg": "/data2/public/prodenv/containers/legendexp_legend-base_latest.sif",
                },
            }
        }
    }

    with Path.open(path_cycle / "config.json", "w") as outfile:
        json.dump(config_file, outfile, ensure_ascii=False, indent=4)

    tmp_path = config_file["setups"]["l200"]["paths"]["simflow"]
    tmp_path = string.Template(tmp_path).substitute({"_": path_cycle})
    os.system(f"git clone {repo_simflow[0]} {tmp_path} --branch {repo_simflow[1]}")

    tmp_path = config_file["setups"]["l200"]["paths"]["metadata"]
    tmp_path = string.Template(tmp_path).substitute({"_": path_cycle})
    os.system(
        f"git clone {repo_metadata[0]} {tmp_path} "
        f"--branch {repo_metadata[1]} --recurse-submodules"
    )


if __name__ == "__main__":
    main()

# vim: ft=python
