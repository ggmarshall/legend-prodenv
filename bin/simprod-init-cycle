#!/usr/bin/env python
from __future__ import annotations

import argparse
import json
import os
import string
from pathlib import Path

repo_simflow = ("git@github.com:legend-exp/legend-simflow.git", "main")
repo_metadata = ("git@github.com:legend-exp/legend-metadata.git", "main")
repo_mage = ("git@github.com:mppmu/MaGe.git", "main")


def main():
    # check existence of env vars
    if not os.getenv("PRODENV"):
        msg = "source setup.sh before continuing"
        raise RuntimeError(msg)

    parser = argparse.ArgumentParser(description="Initialize a new production cycle")
    parser.add_argument(
        "rpath",
        help="relative path of directory in which the production cycle will be created",
        default="",
    )
    args = parser.parse_args()

    path_cycle = Path(os.getenv("PRODENV")) / args.rpath
    path_cycle.mkdir(parents=True)

    # Create json config file
    config_file = {
        "setups": {
            "l200a": {
                "benchmark": {
                    "enabled": False,
                    "n_primaries": {
                        "ver": 10000,
                        "raw": 5000,
                    },
                },
                "paths": {
                    "simflow": "$_/workflow",
                    "metadata": "$_/inputs",
                    "config": "$_/inputs/simprod/config",
                    "tier_ver": "$_/generated/tier/ver",
                    "tier_raw": "$_/generated/tier/raw",
                    "tier_evt": "$_/generated/tier/evt",
                    "tier_pdf": "$_/generated/tier/pdf",
                    "macros": "$_/generated/macros",
                    "plt": "$_/generated/plt",
                    "log": "$_/generated/log",
                    "benchmarks": "$_/generated/benchmarks",
                    "src": "$_/software/python/src",
                    "install": "$_/software/python/install",
                    "cache": "$_/software/python/cache",
                },
                "filetypes": {
                    "input": {
                        "ver": ".mac",
                        "raw": ".mac",
                        "evt": ".root",
                        "pdf": ".root",
                    },
                    "output": {
                        "ver": ".root",
                        "raw": ".root",
                        "evt": ".root",
                        "pdf": ".root",
                    },
                },
                "runcmd": {
                    "ver": "$_/workflow/scripts/MaGe.sh {input.macro} {log}",
                    "raw": "$_/workflow/scripts/MaGe.sh {input.macro} {log}",
                    "pdf": "{} &> {log}",
                },
                "execenv": [
                    "shifter",
                    "--image",
                    "legendexp/legend-software:latest",
                    "--volume $_/inputs/simprod/MaGe:/private",
                    "--env MESHFILESPATH=/private/data/legendgeometry/stl_files",
                    "--env MAGERESULTS=/private/data/legendgeometry",
                ],
            }
        }
    }

    with Path.open(path_cycle / "config.json", "w") as outfile:
        json.dump(config_file, outfile, ensure_ascii=False, indent=4)

    tmp_path = config_file["setups"]["l200a"]["paths"]["simflow"]
    tmp_path = string.Template(tmp_path).substitute({"_": path_cycle})
    os.system(f"git clone {repo_simflow[0]} {tmp_path} --branch {repo_simflow[1]}")

    tmp_path = config_file["setups"]["l200a"]["paths"]["metadata"]
    tmp_path = string.Template(tmp_path).substitute({"_": path_cycle})
    os.system(
        f"git clone {repo_metadata[0]} {tmp_path} "
        f"--branch {repo_metadata[1]} --recurse-submodules"
    )

    # clone and configure MaGe
    os.system(
        f"git clone {repo_mage[0]} {tmp_path}/simprod/MaGe --branch {repo_mage[1]}"
    )
    os.system(
        f"cd {tmp_path}/simprod/MaGe/data/legendgeometry && "
        "ln -s . config_files && "
        "ln -s ../../source/legendgeometry/stl_files ."
    )


if __name__ == "__main__":
    main()
