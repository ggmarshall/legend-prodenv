#!/usr/bin/env python
from __future__ import annotations

import argparse
import json
import os
import shutil
import string
from pathlib import Path

default_pygama_distro = "pygama~=1.3"
default_pylegendmeta_distro = "pylegendmeta~=0.7"


def main():
    parser = argparse.ArgumentParser(
        description="Install user software in data production environment"
    )
    parser.add_argument(
        "config_file", help="production cycle configuration file", type=str
    )
    parser.add_argument(
        "-r",
        help="remove software directory before installing software",
        action="store_true",
    )
    args = parser.parse_args()

    if not Path(args.config_file).is_file():
        msg = "config file is not a regular file"
        raise RuntimeError(msg)

    config_file_dir = Path(args.config_file).resolve().parent
    config_dic = json.load(Path.open(args.config_file))

    exec_cmd = config_dic["setups"]["l200"]["execenv"]["cmd"]
    exec_arg = config_dic["setups"]["l200"]["execenv"]["arg"]
    path_src = config_dic["setups"]["l200"]["paths"]["src"]
    path_install = config_dic["setups"]["l200"]["paths"]["install"]
    path_cache = config_dic["setups"]["l200"]["paths"]["cache"]

    exec_cmd = string.Template(exec_cmd).substitute({"_": config_file_dir})
    exec_arg = string.Template(exec_arg).substitute({"_": config_file_dir})
    path_src = Path(string.Template(path_src).substitute({"_": config_file_dir}))
    path_install = Path(
        string.Template(path_install).substitute({"_": config_file_dir})
    )
    path_cache = Path(string.Template(path_cache).substitute({"_": config_file_dir}))

    if args.r:
        shutil.rmtree(path_install)
        shutil.rmtree(path_cache)

    if (path_src / "pygama").exists():
        pygama_distro = path_src / "pygama"
    else:
        pygama_distro = default_pygama_distro

    if (path_src / "pylegendmeta").exists():
        pylegendmeta_distro = path_src / "pylegendmeta"
    else:
        pylegendmeta_distro = default_pylegendmeta_distro

    os.system(
        f"PYTHONUSERBASE={path_install} PIP_CACHE_DIR={path_cache} "
        f"{exec_cmd} {exec_arg} python3 -B -m pip install "
        f"{pygama_distro} {pylegendmeta_distro}"
    )


if __name__ == "__main__":
    main()
