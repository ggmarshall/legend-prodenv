#!/usr/bin/env python
from __future__ import annotations

import argparse
import json
import os
import string
import subprocess
from pathlib import Path


def main():
    parser = argparse.ArgumentParser(
        description="Load data production environment and execute a given command"
    )
    parser.add_argument(
        "config_file", help="production cycle configuration file", type=str
    )
    parser.add_argument(
        "command", help="command to run within the container", type=str, nargs="+"
    )
    args = parser.parse_args()

    if not Path(args.config_file).is_file():
        print("Error: config file does not exist")
        exit()

    config_file_dir = Path(args.config_file).resolve().parent
    with Path(args.config_file).open() as f:
        config_dic = json.load(f)

    exec_cmd = config_dic["setups"]["l200"]["execenv"]["cmd"]
    exec_arg = config_dic["setups"]["l200"]["execenv"]["arg"]
    path_install = config_dic["setups"]["l200"]["paths"]["install"]

    exec_cmd = string.Template(exec_cmd).substitute({"_": config_file_dir})
    exec_arg = string.Template(exec_arg).substitute({"_": config_file_dir})
    path_install = string.Template(path_install).substitute({"_": config_file_dir})

    xdg_runtime_dir = os.getenv("XDG_RUNTIME_DIR")
    if xdg_runtime_dir:
        subprocess.run(
            [*(exec_cmd.split()), "-B", xdg_runtime_dir, exec_arg, *args.command],
            env={"PYTHONUSERBASE": path_install},
        )
    else:
        subprocess.run(
            [*(exec_cmd.split()), exec_arg, *args.command],
            env={"PYTHONUSERBASE": path_install},
        )


if __name__ == "__main__":
    main()
